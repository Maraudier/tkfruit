"""
tf.keras.layers.Conv2D Notes

"2D convolution layer (e.g. spatial convolution over images)"

"creates a convolution kernel that is convolved with the layer input
to produce a tensor of outputs."

"When using this layer as the first layer in a model, provide the keyword argument input_shape"
Example: input_shape=(128, 128, 3) for a 128x128 RGB picture in data_format="channels_last"

Arguments:

    filters
    
    kernel_size - specifies the height and width of the 2D convolution window.
    If an integer, specifies the same value for all spatial dimensions.
    
    strides    

    padding - valid arguments are 'valid' and 'same'
    
    data_format - specifies the ordering of the dimensions in the inputs
        'channels_last' (default) - (batch, height, width, channels)
        'channels_first' - (batch, channels, height, width)
        
    activation - specifies which activation function to use
        default: "linear" activation, a(x) = x
        
    use_bias: Boolean, whether the layer uses a bias vector
    
    kernel_initializer: initializer for the kernel weights matrix
    
    bias_initializer: initializer for the bias vector
    
    kernel_regularizer: Regularizer function applied to the kernel weights matrix.
    
    bias_regularizer: Regularizer function applied to the bias vector.

    activity_regularizer: Regularizer function applied to the output of the layer (its "activation")..

    kernel_constraint: Constraint function applied to the kernel matrix.

    bias_constraint: Constraint function applied to the bias vector.

Input Shape:

    4D tensor with shape: (samples, channels, rows, cols) for channels_first or (samples, rows, cols, channels)
        for channels_last
        
Output Shape:

    4D tensor with shape: (samples, channels, new_rows, new_cols) for channels_first
                       or (samples, new_rows, new_cols, channels) for channels_last

Source: https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D?hl=en&version=stable                       
"""                       
